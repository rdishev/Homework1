package com.example.demo.web;

import java.util.ArrayList;
import java.util.List;
import java.util.Optional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RestController;

import com.example.demo.entity.Material;
import com.example.demo.repository.MaterialRepository;

@RestController
public class MaterialController {

	@Autowired
	private MaterialRepository materialRepository;
	
	@RequestMapping(value="/material", method = RequestMethod.POST)
	public ResponseEntity<Material> addMaterial (@RequestBody Material material){
		materialRepository.save(material);
		return new ResponseEntity<>(HttpStatus.CREATED);
	}
	
	@CrossOrigin(origins = "http://localhost:4200")
	@RequestMapping(value="/materials", method = RequestMethod.GET)
	public ResponseEntity<List<Material>> findAll() {
		List<Material> materials = new ArrayList<>();
		materialRepository.findAll().forEach(materials::add);
		return new ResponseEntity<>(materials, HttpStatus.OK);
	}

	
	@RequestMapping(value="/material/{id}", method = RequestMethod.GET)
	public ResponseEntity<Material> findById (@PathVariable Long id){
		Optional<Material> materialOpt = materialRepository.findById(id);
		if(materialOpt.isPresent()) {
			return new ResponseEntity<>(materialOpt.get(), HttpStatus.OK);
		}
		return new ResponseEntity<>(HttpStatus.NOT_FOUND);
	}
	
	@RequestMapping(value="/material/type/{type}", method = RequestMethod.GET)
	public ResponseEntity<List<Material>> findByType (@PathVariable String type){
		if(type == null || type.isEmpty()) {
			return new ResponseEntity<>(HttpStatus.BAD_REQUEST);
		}
		List<Material> materials = materialRepository.findByType(type);
		return new ResponseEntity<>(materials, HttpStatus.OK);
	}
	
	@RequestMapping(value="/material/warehouse/{warehouse_id}", method = RequestMethod.GET)
	public ResponseEntity<List<Material>> findByWarehouseid (@PathVariable Long warehouse_id){
		if(warehouse_id == null) {
			return new ResponseEntity<>(HttpStatus.BAD_REQUEST);
		}
		List<Material> materials = materialRepository.findByWarehouseid(warehouse_id);
		return new ResponseEntity<>(materials, HttpStatus.OK);
	}
	
	@RequestMapping(value="/material", method = RequestMethod.PUT)
	public ResponseEntity<Material> updateRecord (@RequestBody Material material){
		if(material.getId()==null) {
			return new ResponseEntity<>(HttpStatus.BAD_REQUEST);
		}
		Optional<Material> materialOpt = materialRepository.findById(material.getId());
		if(!materialOpt.isPresent()) {
			return new ResponseEntity<>(HttpStatus.BAD_REQUEST);
		}
		Material updatedRecord = materialRepository.save(material);
		return new ResponseEntity<>(updatedRecord, HttpStatus.ACCEPTED);
	}
	
	@RequestMapping(value="/material", method = RequestMethod.DELETE)
	public ResponseEntity<Material> deleteRecord (@RequestBody Material material){
		if(material.getId()==null) {
			return new ResponseEntity<>(HttpStatus.BAD_REQUEST);
		}
		Optional<Material> materialOpt = materialRepository.findById(material.getId());
		if(!materialOpt.isPresent()) {
			return new ResponseEntity<>(HttpStatus.BAD_REQUEST);
		}
		materialRepository.delete(material);
		return new ResponseEntity<>(HttpStatus.ACCEPTED);
	}
}
